５月２１日　土曜日
Go学習　
学んだこと　
・変数の基本、変数の更新、いろいろな変数の作り方、変数とエラー、変数と自己代入

詳細
・変数の基本
　変数とはデータ（値）を入れておく箱。箱（変数）には変数名がついていて、いつでも変数から値を取り出すことができる。

・変数とデータ型
変数を利用するには変数を定義することが必要
※int型の変数定義　
 var number int 
    (変数名)　　（データ型）
    
※sting型の変数定義
　var name string
  (変数名)　（データ型）
  
・データ型
文字列や数値という言葉はデータ型という
stringは連続した文字（つまり文字列）
例　”こんにちは,世界”　 = 　string型
　　　　　（文字列）

intは整数(integer)
例　１　= int型
（整数）　　

・変数を使ってみる
例　var n int 
  n = 100 ←変数　nに１００を入れる
  println(n)　←変数　nには１００が入っている
  
・定義と代入
例　var n int = 100 ←変数nを定義して100
  println(n) 
  「var n int = 100」のように書くことで、変数の定義と代入を同時に行うことが可能

・変数の値の更新
変数は、中に入っている値を何度でも上書き（更新）することが可能
値を更新するためには、「=」を使って新しい値を代入
例 var n int =100
   println(n)
   n = 200 ←変数nを２００に更新
   println(n）
  コンソールには１００　２００と出力される

・データ型の省略
「var a int = 100」のように、変数定義と値の代入を同時に行う場合、データ型の指定を省略することが可能
例　var a = 100
  (intが省略)
  println(a)
  これは100が整数であるため、そこから変数aに代入される値のデータ型がint型であることが明らかなため
  
・変数定義の省略した書き方  
b := 200」のように書くと、「var b int = 200」と同じ意味
=ではなく:=（コロンとイコール）であることに注意
例　b:= 200 ←　「var b int = 200」と同じ意味
　　　　printlnl(b)

・printlnの便利な書き方
printlnの()内に変数aとbをコンマで区切って並べて書くと同時に出力可能
例　a: 10
  b: 20
 println(a,b)←二つ同時に出力可能
 
・変数定義の代入の違い
変数定義の「:=」と、代入の「=」の違いに注意
Goでは同じ変数を複数回定義不可
変数の値の代入・更新は「:=」ではなく「=」
エラーが発生する例
a:= 10
a:= 20　←エラーが発生
printl(a)

・変数が使える場所
変数は、定義したあとでしか使うことができない
例　　printl(a)　使えない場所
　　　　　a:= 10
  printl(a)　使える場所
 
・使わない変数
　定義したものの使っていない変数があるとエラーになる
 変数の存在はバグ（不具合）の原因となることが多いため、Goではエラーを発生させて、バグを未然に防ぐ設計になっている
 例　a: 10
  　　b: 20 ←定義されていないためエラーになる
   println (a)
 
・型の不一致
　変数のデータ型と異なるデータ型の値は代入できない
　int型で定義した変数（n := 100）にstring型の値を代入すると、
　「string型の値をint型として代入することはできません」というエラーが表示される
 例　 n:10
    n =  "Hello"←int型ではないためエラー
    println(n)
 
・変数の演算
　変数は値と同じように扱えるので、変数を使って演算を行うことも可能 
例　n:= 10
  println(n+20)
  結果　３０
  
  a:=10
  b:=20
  println(a+b)
 　結果　３０
 
 ・自己代入　
 　　「=」は「代入」を表す
  例　n:=10
    n=n+20 10+20を変数nに代入し直し
    println
 　
 ・自己代入の省略
 例　「n = n + 10」は「n += 10」と省略できる。「-」「*」「/」「%」でも同様
 「++」という記号は「変数に1を足す」という意味です。反対に「--」は「変数から1を引く」という意味で省略できる
 例　n＋＋　n--
 
 
